{
    "project": {},
    "files": {
        "chart_utils.js": {
            "name": "chart_utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dynamic_chart.js": {
            "name": "dynamic_chart.js",
            "modules": {
                "DynamicChart": 1
            },
            "classes": {
                "Legend": 1,
                "BasicBarChart": 1,
                "FixedWidthBarChart": 1
            },
            "fors": {
                "DynamicChart": 1,
                "Legend": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "DynamicChart": {
            "name": "DynamicChart",
            "submodules": {},
            "classes": {
                "DynamicChart": 1,
                "Legend": 1,
                "BasicBarChart": 1,
                "FixedWidthBarChart": 1
            },
            "fors": {
                "DynamicChart": 1,
                "Legend": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "dynamic_chart.js",
            "line": 1839,
            "description": "Module DynamicChart\n\n        This module requires:\n        \n        {{#crossLinkModule \"chart_utils.js\"}}{{/crossLinkModule}}\n        {{#crossLink \"http://d3js.org/d3.v2.js\"}}{{/crossLink}} \n\n        Exposes methods for creating different types of dynamic charts:\n        * BasicBarChart\n        * FixedWidthBarChart\n        * SlidingBarChart\n        * TimeWheelChart"
        }
    },
    "classes": {
        "DynamicChart": {
            "name": "DynamicChart",
            "shortname": "DynamicChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DynamicChart",
            "namespace": ""
        },
        "Legend": {
            "name": "Legend",
            "shortname": "Legend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DynamicChart",
            "namespace": "",
            "file": "dynamic_chart.js",
            "line": 321,
            "access": "private",
            "tagname": ""
        },
        "BasicBarChart": {
            "name": "BasicBarChart",
            "shortname": "BasicBarChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DynamicChart",
            "namespace": "",
            "file": "dynamic_chart.js",
            "line": 486
        },
        "FixedWidthBarChart": {
            "name": "FixedWidthBarChart",
            "shortname": "FixedWidthBarChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DynamicChart",
            "namespace": "",
            "file": "dynamic_chart.js",
            "line": 1839,
            "extends": "BasicBarChart"
        }
    },
    "classitems": [
        {
            "file": "chart_utils.js",
            "line": 2,
            "description": "module ChartUtils",
            "class": "DynamicChart"
        },
        {
            "file": "chart_utils.js",
            "line": 46,
            "description": "Creates and returns a safe proxy for the object passed\n                                                    that will wrap around it and expose only those methods\n                                                    that are declared as enumerable.",
            "params": [
                {
                    "name": "CanDestroy",
                    "description": "\n                                                                     States if the proxy consumer has the authority to call destroy \n                                                                     on the original object",
                    "type": "Boolean, default=false"
                }
            ],
            "return": {
                "description": "A proxy wrapping this object;",
                "type": "Object"
            },
            "throws": [
                "Any exception the original object pseudo-constructor might throw."
            ],
            "class": "DynamicChart"
        },
        {
            "file": "chart_utils.js",
            "line": 147,
            "description": "Creates a new array (shallow) copying the elements of the current one",
            "params": [
                {
                    "name": "n:",
                    "description": "[Optional]\n            If defined, the max number of elements to copy from the current array"
                }
            ],
            "class": "DynamicChart"
        },
        {
            "file": "chart_utils.js",
            "line": 222,
            "description": "Takes a value and a positive integer and returns an Array of n copies of that value",
            "params": [
                {
                    "name": "value:",
                    "description": "[Mandatory]\n                The value to assign to each element of the newly created array.\n                If value is a function, it is called  n times, with no parameters"
                },
                {
                    "name": "n:",
                    "description": "[Mandatory]\n            The size of the final array;\n                WARNING:   since shallow copy is used, only works for\n                                                primitive (immutable) values"
                }
            ],
            "class": "DynamicChart"
        },
        {
            "file": "chart_utils.js",
            "line": 251,
            "description": "Format a hours, minutes couple into a proper time string\nINVARIANT: HH and MM are valid, positive integers\n           If the overcome their range, proper formatting is enforced:\n           F.i. 23,60 -> \"00:00\"",
            "params": [
                {
                    "name": "HH:",
                    "description": "[Mandatory]\n            An int value (between 0 and 23), representing the hours"
                },
                {
                    "name": "MM:",
                    "description": "[Mandatory]\n            An int value (between 0 and 59), representing the minutes"
                }
            ],
            "return": {
                "description": ":    - An array with two integers, the values for hours and minutes\n                <=> The string validates successfully\n            - null <-> Otherwise"
            },
            "class": "DynamicChart"
        },
        {
            "file": "chart_utils.js",
            "line": 271,
            "description": "Takes a string as input and checks if it is a valid\ntime representation, according to the format HH:MM",
            "params": [
                {
                    "name": "timeString:",
                    "description": "[Mandatory]\n                    The string to be evaluated"
                }
            ],
            "return": {
                "description": ":    - An array with two integers, the values for hours and minutes\n                <=> The string validates successfully\n            - null <-> Otherwise"
            },
            "class": "DynamicChart"
        },
        {
            "file": "chart_utils.js",
            "line": 292,
            "description": "Takes two strings as input and checks if they are valid\ntime representations, according to the format HH:MM\nIf it is so, sums them and returns a new string representing\nthe resulting time;",
            "params": [
                {
                    "name": "timeString_1:",
                    "description": "[Mandatory]\n                        The first time string to be added"
                },
                {
                    "name": "timeString_2:",
                    "description": "[Mandatory]\n                        The second time string to be added"
                }
            ],
            "return": {
                "description": ":    - A string representation of the sum of the two timeStamps, in the format HH:MM (modulo 24 hours)\n                <=> Both strings validates successfully"
            },
            "throws": [
                ":     \n            - Invalid Argument Exception",
                "if either input fails to validate"
            ],
            "class": "DynamicChart"
        },
        {
            "file": "chart_utils.js",
            "line": 324,
            "description": "Takes a string and an int value and checks if it is a valid\ntime representation, according to the format HH:MM",
            "params": [
                {
                    "name": "timeString:",
                    "description": "[Mandatory]\n                      The time string taken as initial time"
                },
                {
                    "name": "minutes:",
                    "description": "[Mandatory]\n                    Minutes to be added to the time string"
                }
            ],
            "return": {
                "description": ":    - A string representation of the sum of the two time values, in the format HH:MM (modulo 24 hours)\n                <=> Both inputs validates successfully"
            },
            "throws": [
                ":     \n            - Invalid Argument Exception",
                "if either input fails to validate"
            ],
            "class": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 26,
            "description": "Maximum dimension of the input space, i.e. max number of subvalues for each single point",
            "itemtype": "property",
            "name": "MAX_SPACE_DIMENSION",
            "type": "{Number}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 35,
            "description": "Default fill colors bor graphic elements;",
            "itemtype": "property",
            "name": "FILL_COLORS",
            "type": "{Array}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 44,
            "description": "Default size for chart's labels (in points);",
            "itemtype": "property",
            "name": "DEFAULT_LABEL_SIZE",
            "type": "{Number}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 53,
            "description": "Default size for chart's title text (in points);",
            "itemtype": "property",
            "name": "DEFAULT_TITLE_SIZE",
            "type": "{Number}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 62,
            "description": "Default width for legend's item boxes (in pixel);",
            "itemtype": "property",
            "name": "LEGEND_ITEM_WIDTH",
            "type": "{Number}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 71,
            "description": "Default height for legend's item boxes (in pixel);",
            "itemtype": "property",
            "name": "LEGEND_ITEM_HEIGHT",
            "type": "{Number}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 80,
            "description": "Default margin for legends (in pixel);",
            "itemtype": "property",
            "name": "LEGEND_MARGIN",
            "type": "{Number}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 89,
            "description": "Default left margin for legend's items (in pixel);",
            "itemtype": "property",
            "name": "LEGEND_ITEM_LEFT",
            "type": "{Number}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 98,
            "description": "Default font size for labels attached to legend's items (in pixel);",
            "itemtype": "property",
            "name": "LEGEND_ITEM_FONT_SIZE",
            "type": "{Number}",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 113,
            "description": "Sets the position of the legend in the page. Position is assumed to be absolute.",
            "itemtype": "method",
            "name": "setPosition",
            "chainable": 1,
            "params": [
                {
                    "name": "left",
                    "description": "[Mandatory]\n                      The horizontal position of the legend bounding box;\n                      Only Integers and values that can be converted to integers are accepted.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "[Mandatory]\n                    The vertical position of the legend bounding box;\n                    Only Integers and values that can be converted to integers are accepted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This legend object, to allow for method chaining.",
                "type": "Object"
            },
            "throws": [
                "Never: if either argument is not valid",
                "simply ignores the action."
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 137,
            "description": "Sets the width of the legend bounding box.",
            "itemtype": "method",
            "name": "setWidth",
            "chainable": 1,
            "params": [
                {
                    "name": "width",
                    "description": "[Mandatory]\n                        The new width of the legend;\n                        Only positive integers and values that can be converted\n                        to positive Integers are accepted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This legend object, to allow for method chaining.",
                "type": "Object"
            },
            "throws": [
                "{Illegal Argument Exception} if the argument is not valid (see above)."
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 161,
            "description": "Sets the height of the legend bounding box.",
            "itemtype": "method",
            "name": "setHeight",
            "chainable": 1,
            "params": [
                {
                    "name": "height",
                    "description": "[Mandatory]\n                        The new height of the legend; \n                        Only positive Integers and values that can be converted\n                        to positive integers are accepted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This legend object, to allow for method chaining.",
                "type": "Object"
            },
            "throws": [
                "<ul>\n            <li> Illegal Argument Exception",
                "if the argument is not valid (see above). </li>\n        </ul>"
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 186,
            "description": "Adds an item to the legend and then redraws it;",
            "itemtype": "method",
            "name": "addItem",
            "chainable": 1,
            "params": [
                {
                    "name": "labelText",
                    "description": "[Mandatory]\n                            The text of the label for this new item;",
                    "type": "String"
                },
                {
                    "name": "labelColor",
                    "description": "[Mandatory]\n                            The color to be used to draw new item's label;",
                    "type": "String"
                },
                {
                    "name": "fillColor",
                    "description": "[Mandatory]\n                            The color associated with this new item;",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This legend object, to allow for method chaining;",
                "type": "Object"
            },
            "throws": [
                "<ul>\n            <li> Wrong Number of arguments Exception",
                "if either argument is missing. </li>\n        </ul>"
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 225,
            "itemtype": "method",
            "name": "removeItem",
            "chainable": 1,
            "params": [
                {
                    "name": "index",
                    "description": "[Mandatory] \n                        The index of the item to update; \n                        Only positive Integers and values that can be converted\n                        to positive integers are accepted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This legend object, to allow for method chaining;",
                "type": "Object"
            },
            "throws": [
                "<ul>\n            <li>Illegal Argument Exception",
                "if index is not in its valid range.</li>\n        </ul>"
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 250,
            "description": "Updates the attributes of an item of the legend and then redraws it;",
            "itemtype": "method",
            "name": "updateItem",
            "chainable": 1,
            "params": [
                {
                    "name": "index",
                    "description": "[Mandatory]\n                                            The index of the item to update;",
                    "type": "Number"
                },
                {
                    "name": "labelText",
                    "description": "[Optional]\n                                                The new text for the label of the index-th item;\n                                                If omitted or undefined won't be changed;",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "labelColor",
                    "description": "[Optional]\n                                                The new color to be used to draw the index-th item's label;\n                                                If omitted or undefined won't be changed;",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "fillColor",
                    "description": "[Optional]\n                                                The new color associated with the index-th item;\n                                                If omitted or undefined won't be changed;",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "This legend object, to allow for method chaining;",
                "type": "Object"
            },
            "throws": [
                "- Illegal Argument Exception",
                "if index is not in its valid range."
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 292,
            "description": "Object's destructor: helps garbage collector freeing memory, and removes legend's DOM elements.\nWARNING: calling destroy on an object will force any further reference \n                                     to its attributes / methods to throw exceptions.\nNOTE:   This function should be override by any class inheriting from this chart.\n                                    In order to properly work, any overriding destroyer should:\n                                    - Free any array specific to the object on which is called;\n                                    - Remove any event listener on chart objects;\n                                    - Call super object's destroy method.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": ", to state that the object has been destroyed.",
                "type": "Null"
            },
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 327,
            "description": "[Private Object, only accessible to DynamicChart classes]\n\nCreates, upon request, a new Legend object and returns it;",
            "itemtype": "method",
            "name": "LegendFactory",
            "params": [
                {
                    "name": "width",
                    "description": "[Mandatory]\n                        The desired width for the chart (<b>can't be changed later</b>)\n                        Can be any value that is or can be converted to a positive integer.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                        The desired height for the chart (<b>can't be changed later</b>)\n                        Can be any value that is or can be converted to a positive integer.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "[Optional]\n                        The horizontal position of the legend bounding box;",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "top",
                    "description": "[Optional]\n                        The vertical position of the legend bounding box;",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "[parent=",
                    "description": "page's body element]   [Optional]\n                        The DOM element to which the diagram should be appended as a child",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new Legend object;",
                "type": "Object"
            },
            "throws": [
                "-   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n        -   Illegal Argument exception",
                "if width or height aren't valid (numeric",
                "positive) values \n            (through setWidth or setHeight)\n        -   Illegal Argument exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n        -   Exception",
                "if dataDim exceeds the maximum data dimension\n        -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 357,
            "description": "[Private method, not visible from consumers]",
            "itemtype": "method",
            "name": "__init__",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "legend",
                    "description": "[Mandatory]\n                The legend object to be initialized;",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "[Mandatory]\n                The width of the legend object;",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                The height of the legend object;",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "throws": [
                "-   Illegal Argument exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                (through setWidth or setHeight)"
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 387,
            "description": "[Protected method, not visible outside this library]\n\nUpdate the drawings of this legend object;",
            "itemtype": "method",
            "name": "__redrawLegend__",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "throws": [
                "-   Illegal Argument exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                (through setWidth or setHeight)"
            ],
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 436,
            "description": "The div element that will be a container to the legend's svg element",
            "itemtype": "property",
            "name": "__divElement__",
            "type": "{Object}",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 449,
            "description": "The svg element for this Legend",
            "itemtype": "property",
            "name": "__svgElement__",
            "type": "{Object}",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 463,
            "description": "Array of the items contained in the legend",
            "itemtype": "property",
            "name": "__items__",
            "type": "{Array}",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Legend",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 493,
            "description": "Sets the position of the chart in the page. Position is assumed to be absolute.",
            "itemtype": "method",
            "name": "setPosition",
            "chainable": 1,
            "params": [
                {
                    "name": "left",
                    "description": "[Mandatory]\n                        The horizontal position of the chart bounding box;",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "[Mandatory]\n                        The vertical position of the chart bounding box;",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This chart object, to allow for method chaining.",
                "type": "Object"
            },
            "throws": [
                "Never: if either argument is not valid",
                "simply ignores the action."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 514,
            "description": "Sets the width of the chart bounding box.",
            "itemtype": "method",
            "name": "setWidth",
            "chainable": 1,
            "params": [
                {
                    "name": "width",
                    "description": "[Mandatory]\n                        The new width of the chart;\n                        Only positive integers and values that can be converted\n                        to positive Integers are accepted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This chart object, to allow for method chaining.",
                "type": "Object"
            },
            "throws": [
                "{Illegal Argument Exception} if the argument is not valid (see above)."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 537,
            "description": "Sets the height of the chart bounding box.",
            "itemtype": "method",
            "name": "setHeight",
            "chainable": 1,
            "params": [
                {
                    "name": "height",
                    "description": "[Mandatory]\n                        The new height of the chart; \n                        Only positive Integers and values that can be converted\n                        to positive integers are accepted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This chart object, to allow for method chaining.",
                "type": "Object"
            },
            "throws": [
                "<ul>\n            <li> Illegal Argument Exception",
                "if the argument is not valid (see above). </li>\n        </ul>"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 561,
            "description": "Sets the title for the chart, including all its attributes.",
            "itemtype": "method",
            "name": "setTitle",
            "chainable": 1,
            "params": [
                {
                    "name": "title",
                    "description": "[Mandatory]\n                        The new title for the chart;",
                    "type": "String"
                },
                {
                    "name": "[size=DEFAULT",
                    "description": "TITLE SIZE]  [Optional]\n                        The size of the new title;<br>\n                        Only positive Integers and values that can be converted\n                        to positive integers are accepted.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "[Optional]\n                        The color of the new title;<br>",
                    "type": "String",
                    "optional": true,
                    "optdefault": "black"
                },
                {
                    "name": "left",
                    "description": "[Optional]\n                        The horizontal position of the title, relative to the chart; \n                        the text will be centered around this point<br>\n                        Only positive Integers and values that can be converted\n                        to positive integers are accepted.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "centered"
                },
                {
                    "name": "top",
                    "description": "[Optional]\n                        The vertical position of the title, relative to the chart;<br>\n                        Only positive Integers and values that can be converted\n                        to positive integers are accepted.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "This legend object, to allow for method chaining.",
                "type": "Object"
            },
            "throws": [
                "<ul>\n            <li> Illegal Argument Exception",
                "if the argument is not valid (see above). </li>\n        </ul>"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 622,
            "description": "Insert new data into the chart, at runtime;",
            "itemtype": "method",
            "name": "addLegend",
            "chainable": 1,
            "params": [
                {
                    "name": "labels:",
                    "description": "[Mandatory]\n                                            An array containing exactly one label for each component of the data space.\n                                            A new legend object will be created and attached to the chart, and then\n                                            for every subcomponent [label] a new item will be added to the legend."
                }
            ],
            "return": {
                "description": ": This chart object, to support method chaining;"
            },
            "throws": [
                "-   Illegal Argument Exception: if labels isn't an Array object.\n                                    -   Invalid array size Exception:   if the number of elements in the array is different\n                                                                        from the number of subcomponents of the data space\n                                                                        (i.e. from the __dataDim__ attribute)"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 671,
            "description": "Insert new data into the chart, at runtime;",
            "chainable": 1,
            "params": [
                {
                    "name": "newDataArray:",
                    "description": "[Mandatory]\n                        an array containing the next values that needs to be drawn in the chart;\n                        Each array element, in order to be added to the chart, must be compliant\n                        with the data format defined by the function __formatData__ (which \n                        can itself be set at runtime, and by default accepts arrays of \n                        __dataDim__ integers, neglecting to render the negative ones)."
                }
            ],
            "return": {
                "description": ": This chart object, to support method chaining;"
            },
            "throws": [
                "-   Illegal Argument Exception: if newDataArray isn't an Array object."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 746,
            "description": "Change the data formatting function, allowing to pass a custom handler\n                            to cope with JSON or other data formats.",
            "chainable": 1,
            "params": [
                {
                    "name": "formaValueFunction:",
                    "description": "[Mandatory] \n                                        The new function"
                }
            ],
            "return": {
                "description": ":    This object, to allow for method chaining;"
            },
            "throws": [
                "- Illegal Argument Exception",
                "if the argument passed isn't a valid function."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 771,
            "description": "Remove all the data or part of it from the chart;",
            "chainable": 1,
            "params": [
                {
                    "name": "n:",
                    "description": "[Optional, For internal use only] \n                                        The number of elements to remove from the beginning of the data array,\n                                        i.e. how many of the oldest values should be removed from the chart;"
                }
            ],
            "return": {
                "description": ":    This object, to allow for method chaining;"
            },
            "throws": [
                "Illegal Argument Exception",
                "if n is passed but it isn't valid",
                "i.e. it isn't convertible to a positive int."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 810,
            "description": "Toggles the visibility of labels in the chart",
            "chainable": 1,
            "params": [
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                For multi-dimensional data spaces, specifies\n                which component is going to be affected;"
                },
                {
                    "name": "visible:",
                    "description": "[Optional]\n                If specified overwrites toggle behaviour and set\n\t\t\t\t\t\t\t\t\t\t\t\tthe visibility to visible."
                }
            ],
            "return": {
                "description": ":    This chart object, to allow for method chaining"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 840,
            "description": "Checks if labels for the index-th dimension are visible",
            "chainable": 1,
            "params": [
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                        For multi-dimensional data spaces, specifies\n                                                        which component is going to be affected;"
                }
            ],
            "return": {
                "description": ":    The visibility of the label"
            },
            "throws": [
                "Invalid Index Exception:   if the index specified isn't valid."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 862,
            "description": "Sets scaling to global\nWhen data space has a dimension greater than 1 (i.e. when each data value has more than 1 component)\n                                    these charts support either global scaling (relative to the whole dataset)\n                                    or local scaling (relative to value of the same component) of each subcomponent.",
            "chainable": 1,
            "return": {
                "description": ":    This chart object, to allow for method chaining."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 885,
            "description": "Sets scaling to local",
            "chainable": "When data space has a dimension greater than 1 (i.e. when each data value has more than 1 component)\n                                    these charts support either global scaling (relative to the whole dataset)\n                                    or local scaling (relative to value of the same component) of each subcomponent.",
            "return": {
                "description": ":    This chart object, to allow for method chaining"
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 909,
            "description": "Gets the fill color used to draw the index-th component of the data space.",
            "chainable": 1,
            "params": [
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                For multi-dimensional data spaces, specifies\n                                                which component is going to be selected;"
                }
            ],
            "return": {
                "description": ":    The selected fill color"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 931,
            "description": "Gets the stroke color used to draw the index-th component of the data space.",
            "params": [
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                For multi-dimensional data spaces, specifies\n                                                which component is going to be selected;"
                }
            ],
            "return": {
                "description": ":    The selected stroke color"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 952,
            "description": "Gets the fill color used for the labels attached to the index-th component of the data space.",
            "params": [
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                For multi-dimensional data spaces, specifies\n                                                which component is going to be selected;"
                }
            ],
            "return": {
                "description": ":    The selected label color"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 973,
            "description": "Gets the size used for the labels attached to the index-th component of the data space.",
            "params": [
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                For multi-dimensional data spaces, specifies\n                                                which component is going to be selected;"
                }
            ],
            "return": {
                "description": ":    The selected size"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 994,
            "description": "Sets the fill color used to draw the index-th component of the data space.",
            "chainable": 1,
            "params": [
                {
                    "name": "color:",
                    "description": "[Mandatory]\n                                                The new fill color for the selected component's;"
                },
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                For multi-dimensional data spaces, specifies\n                                                which component is going to be selected;"
                }
            ],
            "return": {
                "description": ":    This chart object, to allow for method chaining"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid;"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1024,
            "description": "Sets the stroke color used to draw the index-th component of the data space.",
            "chainable": 1,
            "params": [
                {
                    "name": "color:",
                    "description": "[Mandatory]\n                                                The new stroke color for the selected component's;"
                },
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                For multi-dimensional data spaces, specifies\n                                                which component is going to be selected;"
                }
            ],
            "return": {
                "description": ":    This chart object, to allow for method chaining"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid;"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1050,
            "description": "Sets the fill color used for the labels attached to the index-th component of the data space.",
            "chainable": 1,
            "params": [
                {
                    "name": "color:",
                    "description": "[Mandatory]\n                                                The new color for the selected component's labels;"
                },
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                For multi-dimensional data spaces, specifies\n                                                which component is going to be selected;"
                }
            ],
            "return": {
                "description": ":    This chart object, to allow for method chaining"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid;"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1081,
            "description": "Sets the size used for the labels attached to the index-th component of the data space.",
            "chainable": 1,
            "params": [
                {
                    "name": "size:",
                    "description": "[Mandatory]\n                                                The new size for the selected component's labels;\n                                                Must be a positive integer, or a value that can be converted\n                                                to a positive integer;"
                },
                {
                    "name": "index:",
                    "description": "[Optional, default = 0]\n                                                For multi-dimensional data spaces, specifies\n                                                which component is going to be selected;"
                }
            ],
            "return": {
                "description": ":    This chart object, to allow for method chaining"
            },
            "throws": [
                "- Invalid Index Exception:   if the index specified isn't valid;\n                                            - Illegal Argument Exception:   if size isn't valid (see above)."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1114,
            "description": "Sets the bars width property;\n                                For this chart, bar width is computed at runtime according to the number of bars plotted,\n                                so this property can't be set.\n                                Function is declared to improve the consistency of the interface.",
            "throws": [
                "Read only property Exception"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1126,
            "description": "Gets the current bar width for this chart;\n                                For this chart, bar width is computed at runtime according to the number of bars plotted;",
            "params": [
                {
                    "name": "xScale:",
                    "description": "[Optional, default = this.__xScale__]\n                                                It is possible to pass a d3 scale object to get the bar width\n                                                computed with respect to a different scale metric;\n                                                On default, the value is computed with respect to this chart's\n                                                current metric."
                }
            ],
            "return": {
                "description": ":    The value computed for the bar width under current object state."
            },
            "throws": [
                "- Illegal Argument Exception:   if an invalid xScale object is passed."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1152,
            "description": "Object's destructor: helps garbage collector freeing memory, and removes chart DOM elements.\nWARNING: calling destroy on an object will force any further reference \n                                     to its attributes / methods to throw exceptions.\nNOTE:   This function should be override by any class inheriting from this chart.\n                                    In order to properly work, any overriding destroyer should:\n                                    - Free any array specific to the object on which is called;\n                                    - Remove any event listener on chart objects;\n                                    - Call super object's destroy method.",
            "return": {
                "description": ":    null, to state that the object has been destroyed."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1197,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nUtility function to take account of the number of points currently added to the chart",
            "return": {
                "description": ":    How many points are stored in the dataset right now."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1213,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n                                \nChecks that new data can be added to the chart (if the chart can represent only a limited number of points);\n\nWARNING: This function SHOULD be overriden in any class inheriting from the base class\nin order to handle differents needs",
            "params": [
                {
                    "name": "newDataArray:",
                    "description": "[Mandatory]\n                        The array of values that should be added;"
                }
            ],
            "return": {
                "description": ":    The array of values that can still be added to the chart;\n            If no other value can be added, return the empty list."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1239,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nChecks that the value passed corresponds to the data format allowed for the current chart;\nThis function can be overriden in any class inheriting from the base class\nin order to handle differents data formats (i.e. Objects or JSON).",
            "params": [
                {
                    "name": "value:",
                    "description": "[Mandatory]\n                The value to be tested;"
                }
            ],
            "return": {
                "description": ":    An array with properly formatted values, each of whom converted to float\n                 <=> value is correctly validated\n            null <-> Otherwise"
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1279,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nReturns the list of the svg elements used to represent data subcomponents\nwith the required index.\nI.e.:   if data space is 3-dimensional (i.e. every point has 3 components)\n        __selectData__(data, 2) would select the svg elements representing\n        the 2nd component of every point in data",
            "params": [
                {
                    "name": "data:",
                    "description": "[Mandatory]\n                The dataset on which selection should be applied"
                },
                {
                    "name": "index:",
                    "description": "[Mandatory]\n                The index of the required component\n                INVARIANT:  to avoid defensive programming,\n                            it is assumed 0 <= index < this.__dataDim__"
                },
                {
                    "name": "n:",
                    "description": "[Optional]\n                The maximum number of elements to return;"
                }
            ],
            "return": {
                "description": ":    The proper set of d3 elements."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1311,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nReturns the list of the svg elements used to draw the labels of\nsubcomponents of data with the required index.\nI.e.:   if data space is 3-dimensional (i.e. every point has 3 components)\n        __selectLabels__(data, 3) would select the svg elements representing\n        the labels of the 3nd component of every point in data",
            "params": [
                {
                    "name": "data:",
                    "description": "[Mandatory]\n                The dataset on which selection should be applied;"
                },
                {
                    "name": "index:",
                    "description": "[Mandatory]\n                The index of the required component;\n                INVARIANT:  to avoid defensive programming,\n                            it is assumed 0 <= index < this.__dataDim__"
                },
                {
                    "name": "n:",
                    "description": "[Optional]\n                The maximum number of elements to return;"
                }
            ],
            "return": {
                "description": ":    The proper set of d3 elements."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1344,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nCalled by appendData() to draw the newly added points in dataSet, once for\nevery data subcomponent.\n\nWARNING:    if you inherit from this class you might want to override both\n            this method and __updateDrawing__ in order to obtain a custom chart.",
            "params": [
                {
                    "name": "dataSet:",
                    "description": "[Mandatory]\n                The set of svg elements created so far to represent the data\n                WARNING: this parameter should be generated by an appropriate\n                         call to __selectData__"
                },
                {
                    "name": "labelsSet:",
                    "description": "[Mandatory]\n                    The set of svg elements created so far to represent the labels of the data\n                    WARNING: this parameter should be generated by an appropriate\n                            call to __selectLabels__"
                },
                {
                    "name": "dataIndex:",
                    "description": "[Mandatory]\n                    The index of the component of the data which is to be drawn"
                },
                {
                    "name": "xScale:",
                    "description": "[Mandatory]\n                D3 scale object for X axis"
                },
                {
                    "name": "yScale:",
                    "description": "[Mandatory]\n                D3 scale object for Y axis (specific current component)"
                }
            ],
            "return": {
                "description": ":    Nothing."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1415,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nCalled by appendData() to update drawing of the points in dataSet, once for\nevery data subcomponent.\nAfter new data is inserted by __drawNewData__, appendData performs adjustments\nto accomodate for scale change or shift in the drawing due to time, and this\nfunction takes care of updating and fixing the chart representation.\n\nWARNING:    if you inherit from this class you might want to override both\n            this method and __drawNewData__ in order to obtain a custom chart.",
            "params": [
                {
                    "name": "dataSet:",
                    "description": "[Mandatory]\n                The set of svg elements created so far to represent the data\n                WARNING: this parameter should be generated by an appropriate\n                         call to __selectData__"
                },
                {
                    "name": "labelsSet:",
                    "description": "[Mandatory]\n                    The set of svg elements created so far to represent the labels of the data\n                    WARNING:    this parameter should be generated by an appropriate\n                                call to __selectLabels__"
                },
                {
                    "name": "dataIndex:",
                    "description": "[Mandatory]\n                    The index of the component of the data which is to be drawn"
                },
                {
                    "name": "xScale:",
                    "description": "[Mandatory]\n                    D3 scale object for X axis"
                },
                {
                    "name": "yScale:",
                    "description": "[Mandatory]\n                    D3 scale object for Y axis (specific current component)"
                }
            ],
            "return": {
                "description": ":    Nothing."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1479,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nTakes care of the remaining details related to the removal of part of the values from the chart,\nbased on to the particular chart needs.\n\nWARNING:    Inherited objects MIGHT NEED to override this function",
            "params": [
                {
                    "name": "n:",
                    "description": "[Mandatory]\n            Number of elements removed from the chart"
                }
            ],
            "return": {
                "description": ":    Nothing."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1503,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nRemoves the svg objects related to the data cleared by the caller (clearData)",
            "params": [
                {
                    "name": "dataSet:",
                    "description": "[Mandatory]\n                List of drawing objects (default: rects) representing data"
                },
                {
                    "name": "labelsSet:",
                    "description": "[Mandatory]\n                    List of labels related to data removed"
                }
            ],
            "return": {
                "description": ":    Nothing."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1527,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nComputes and return the suggested value for the opacity of the bar\ndrawn to represent a certain value.",
            "params": [
                {
                    "name": "val:",
                    "description": "[Mandatory]\n            The value to be represented, after being normalized\n            (scaled between 0 and 1).\n            INVARIANT:  to avoid defensive programming,\n                        it is assumed 0 <= val <=1"
                }
            ],
            "return": {
                "description": ":    The opacity to apply to the value representation in the chart."
            },
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1551,
            "description": "Basic bar histogram chart.\n            Values are represented using vertical bars;\n            Each point or value can have up to 10 subcomponents, where each component can be \n            any non-nregative real number (i.e., each point can be in R_+^i, for 1 <= i <= 10).",
            "itemtype": "method",
            "name": "BasicBarChart",
            "chainable": 1,
            "params": [
                {
                    "name": "width",
                    "description": "[Mandatory]\n                            The desired width for the chart (<b>can't be changed later</b>)<br>\n                            Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                            The desired height for the chart (<b>can't be changed later</b>)<br>\n                            Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "dataDim",
                    "description": "[Optional]\n                            The dimension of the data space, i.e. the number of subvalues for each data entry<br>\n                            Can be any value that is or can be converted to an integer between 1 and MAX_SPACE_DIMENSION.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "parent",
                    "description": "[Optional]\n                            The DOM element to which the diagram should be appended as a child",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "body"
                }
            ],
            "return": {
                "description": "A new BasicBarChart object",
                "type": "Object"
            },
            "throws": [
                "-   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n                                -   Illegal Argument exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                                    (through setWidth or setHeight)\n                                -   Illegal Argument exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n                                -   Exception",
                "if dataDim exceeds the maximum data dimension\n                                -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1584,
            "access": "private",
            "tagname": "[Private method]\n\nInits the chart DIV and SVG container, setting width and height, if they are passed as arguments;",
            "params": [
                {
                    "name": "chart:",
                    "description": "[Mandatory]\n                The chart object that needs initialization;"
                },
                {
                    "name": "width:",
                    "description": "[Optional]\n                The desired width for the chart;\n                If passed, MUST be a positive integer, or a value that\n                can be converted to a positive integer"
                },
                {
                    "name": "height:",
                    "description": "[Optional]\n                The desired height for the chart;\n                If passed, MUST be a positive integer, or a value that\n                can be converted to a positive intege"
                }
            ],
            "return": {
                "description": ":    Nothing;"
            },
            "throws": [
                "- Inconsitent Chart State Exception",
                "if the internale state of the object is compromised;\n            - Illegal Argument Exception",
                "through setWidth or setHeight",
                "if one of the arguments is\n                not valid."
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1619,
            "access": "private",
            "tagname": "[Private method]\n\nPerforms all the settings related to the data handling area of the chart;",
            "params": [
                {
                    "name": "basicCharObj:",
                    "description": "[Mandatory]\n                        The chart object to init;"
                },
                {
                    "name": "dataDim:",
                    "description": "[Optional, default = 1]\n                The dimension of the data space, i.e. the number of subvalues\n                for each data entry;\n                Can take any value that is or can be converted to an integer \n                between 1 and MAX_SPACE_DIMENSION."
                }
            ],
            "return": {
                "description": ":    Nothing;"
            },
            "throws": [
                "-   Illegal Argument exception",
                "if dataDim is passed but it's \n                        not valid (not numeric or not positive)\n                    -   Exception",
                "if dataDim exceeds the maximum data dimension"
            ],
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1649,
            "description": "i.e. number of subcomponents of each data \"point\"",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1659,
            "description": "Initially every component's array is set to []",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1668,
            "description": "(used to compute the vertical scale)\nDefaults to 0",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1703,
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1712,
            "description": "The div element that will be a container to the chart's svg element",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1722,
            "description": "The chart's svg element",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1732,
            "description": "Scale object for the horizontal axis of the chart \n(common to all data subcomponents)",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1743,
            "description": "Scale objects for the vertical axis of the chart \n(array with one obj for each data subcomponents,\n so that each component can be scaled independently)",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1754,
            "description": "if the different components should scale locally or globally",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1764,
            "description": "For each data subcomponent, stores the size to be used\nfor its label\n[Defaults to DEFAULT_LABEL_SIZE]",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1775,
            "description": "For each data subcomponent, states whether or not\nits label is visible\n[Defaults to true]",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1787,
            "description": "For each data subcomponent, stores the color to be used\nto fill its drawing component\n[Defaults to a predefined color sequence]",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1799,
            "description": "For each data subcomponent, stores the color to be used\nfor the stroke of its drawing component\n[Defaults to black]",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1810,
            "description": "For each data subcomponent, stores the color to be used\nto draw its labels [Defaults to black]",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1821,
            "description": "decides to add a legend to the chart;\n[Defaults to null]",
            "class": "BasicBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1843,
            "description": "Advanced Chart: FixedWidthBarChart\n            Inherits from BasicBarChart redefining the drawing methods.\n            As for its super class values are represented using vertical bars, and each point \n            can have up to 10 subcomponents, where each component can be any non-negative \n            real number (i.e., each point can be in R_+^i, for 1 <= i <= 10).\nFor this chart the bar width is fixed (although can be set at run time)\n            It is possible to choose between having only a fixed number of values accepted,\n            or if a certain number of the oldest values should be removed when the\n            chart is full.",
            "itemtype": "method",
            "name": "FixedWidthBarChart",
            "params": [
                {
                    "name": "ticks",
                    "description": "[Mandatory]\n                            The number of values that can be drawn at the same time (<b>can't be changed later</b>)<br>\n                            Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "startingPoint",
                    "description": "[Mandatory, but not used at the moment: inserted for future back-compatibility]<br>\n                            The reference for the label of the first point.<br>\n                            Should be an incrementable value;",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "[Mandatory]\n                            The desired width for the chart (<b>can't be changed later</b>)<br>\n                            Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                            The desired height for the chart (<b>can't be changed later</b>)<br>\n                            Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "dataDim",
                    "description": "[Optional]\n                            The dimension of the data space, i.e. the number of subvalues for each data entry<br>\n                            Can be any value that is or can be converted to an integer between 1 and MAX_SPACE_DIMENSION.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "parent",
                    "description": "[Optional]\n                            The DOM element to which the diagram should be appended as a child",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "body"
                }
            ],
            "return": {
                "description": ":    A new FixedWidthBarChart object"
            },
            "throws": [
                "-   Illegal Argument Exception",
                "if ticks isn't a positive integer\n                                -   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n                                -   Illegal Argument Exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                                    (through setWidth or setHeight)\n                                -   Illegal Argument Exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n                                -   Exception",
                "if dataDim exceeds the maximum data dimension\n                                -   Exception",
                "if the ratio between chart's width and number of ticks is such\n                                    that the computed bar height is smaller than 1 pixel\n                                -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1897,
            "description": "drawn at the same time in this chart",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1906,
            "description": "[Defaults to 1]",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1916,
            "description": "new plots would override previous ones.\nTwo solutions are made available:\n1)  By default, new data is rejected, generating a full stack exception;\n2)  A certain number of the oldest data points can be purged off the chart,\n    counter-clockwise rotating the data",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1932,
            "description": "Sets fixed data length mode.\n                                                \n                                                When __ticks__ data points have already been plotted,\n                                                new plots would override previous ones.\n                                                Two solutions are made available:\n                                                1)  By default, new data is rejected, generating a full stack exception;\n                                                2)  A certain number of the oldest data points can be purged off the chart,\n                                                    counter-clockwise rotating the data\n                                                    \n                                                This function sets the first option.",
            "chainable": 1,
            "return": {
                "description": ":    This chart object, to allow for methd chaining."
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 1967,
            "description": "Sets data shift mode.\n                                                \n                                                When __ticks__ data points have already been plotted,\n                                                new plots would override previous ones.\n                                                Two solutions are made available:\n                                                1)  By default, new data is rejected, generating a full stack exception;\n                                                2)  A certain number of the oldest data points can be purged off the chart,\n                                                    shifting back (left) the remaining data.\n                                                    \n                                                This function sets the second option.",
            "chainable": 1,
            "params": [
                {
                    "name": "ticksToRemove:",
                    "description": "[Mandatory]\n                                                                      How much data to remove on full chart;"
                }
            ],
            "return": {
                "description": ":    This object, to allow for method chaining;"
            },
            "throws": [
                "Illegal Argument Exception",
                "if the argument isn't valid (see above)."
            ],
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2008,
            "description": "Returns current bars' width.\n                                                The overridden version takes a parameter, but this method\n                                                doesn't need it because barWidth is fixed for this chart.",
            "return": {
                "description": ": the value set for __barWidth__;"
            },
            "override": ":  basicBarChartSharedPrototype.getBarWidth",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2025,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nWARNING: This function SHOULD be overriden in any class inheriting from the base class\n         in order to handle differents needs",
            "override": ":  basicBarChartSharedPrototype.__canAppendData__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2069,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n                                               \nWARNING:    if you inherit from this class you might want to override both\n            this method and __updateDrawing__ in order to obtain a custom chart.",
            "override": ":   basicBarChartSharedPrototype.__drawNewData__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2114,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nWARNING:    if you inherit from this class you might want to override both\n            this method and __drawNewData__ in order to obtain a custom chart.",
            "override": ":  basicBarChartSharedPrototype.__updateDrawing__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2149,
            "access": "private",
            "tagname": "[Private method, not visible to consumers]\n\nInits the chart by computing the allowed barWidth;",
            "params": [
                {
                    "name": "chart:",
                    "description": "[Mandatory]\n                The chart object that needs initialization;"
                },
                {
                    "name": "width:",
                    "description": "[Mandatory]\n                Chart's width;"
                },
                {
                    "name": "height:",
                    "description": "[Mandatory]\n                Chart's height;"
                }
            ],
            "return": {
                "description": ": Nothing"
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2169,
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2186,
            "extends": "{FixedWidthBarChart}\n\nAdvanced Chart: SlidingBarChart\nInherits from FixedWidthBarChart redefining the drawing methods.\nAs for its super class values are represented using vertical bars, and each point \ncan have up to 10 subcomponents, where each component can be any non-negative \nreal number (i.e., each point can be in R_+^i, for 1 <= i <= 10).\n\nFor this chart the bar width is fixed (although can be set at run time)\nIt is possible to choose between having only a fixed number of values accepted,\nor if a certain number of the oldest values should be removed when the\nchart is full.\n\nEvery __ticksBetweenHighlights__ values inserted (where __ticksBetweenHighlights__ can \nbe set at runtime, although it defaults to 10) the background of those values is highlighted, \nto stress out time progression.",
            "params": [
                {
                    "name": "ticks",
                    "description": "[Mandatory]\n                The number of values that can be drawn at the same time (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "[Mandatory]\n                The desired width for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                The desired height for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "dataDim",
                    "description": "[Optional]\n                The dimension of the data space, i.e. the number of subvalues for each data entry<br>\n                Can be any value that is or can be converted to an integer between 1 and MAX_SPACE_DIMENSION.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "parent",
                    "description": "[Optional]\n                The DOM element to which the diagram should be appended as a child",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "body"
                }
            ],
            "return": {
                "description": "A new SlidingBarChart object",
                "type": "Object"
            },
            "throws": [
                "-   Illegal Argument Exception",
                "if ticks isn't a positive integer\n                    -   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n                    -   Illegal Argument Exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                        (through setWidth or setHeight)\n                    -   Illegal Argument Exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n                    -   Exception",
                "if dataDim exceeds the maximum data dimension\n                    -   Exception",
                "if the ratio between chart's width and number of ticks is such\n                        that the computed bar height is smaller than 1 pixel\n                    -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2246,
            "description": "the chart from its creation (to synch the highlighted ticks)",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2256,
            "description": "Every __ticksBetweenHighlights__ ticks, the data is \"higlighted\"\nby applying the selected highlight style to the background\n[Defaults to 10]",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2268,
            "description": "Returns the number of ticks between two consecutive highlights (one extreme inclusive)",
            "return": {
                "description": ":    The number of ticks between two consecutive highlights;"
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2282,
            "description": "Sets the number of ticks between two consecutive highlights (one extreme inclusive)",
            "chainable": 1,
            "params": [
                {
                    "name": "ticks:",
                    "description": "[Mandatory]\n                                                                The number of ticks between two consecutive highlights;"
                }
            ],
            "return": {
                "description": ":    This object, to allow for method chaining;"
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2309,
            "description": "Defaults to DEFAULT_BACKGROUND (\"lightgrey\")",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2320,
            "description": "Defaults to DEFAULT_BACKGROUND_HIGHLIGHT (\"lightpink\")",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2331,
            "description": "Changes the background color (not highlighted points)",
            "chainable": 1,
            "params": [
                {
                    "name": "bgColor:",
                    "description": "[Mandatory]\n                                                                The new color for background bars;"
                }
            ],
            "return": {
                "description": ":    This object, to allow for method chaining;"
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2360,
            "description": "Returns current background bars' color",
            "return": {
                "description": ": the value set for __backgroundColor__;"
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2375,
            "chainable": 1,
            "params": [
                {
                    "name": "bgHColor:",
                    "description": "[Mandatory]\n                                                                The new color for highlighted background bars;"
                }
            ],
            "return": {
                "description": ":    This object, to allow for method chaining;"
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2402,
            "return": {
                "description": ": the value set for __backgroundHighlightColor__;"
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2415,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nWARNING: This function SHOULD be overriden in any class inheriting from the base class\n         in order to handle differents needs",
            "override": ":  fixedWidthBarChart.__canAppendData__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2461,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nReturns the list of the svg elements used to draw background; \nElements can be filtered using a custom filter passad as an optional\nparameter;",
            "params": [
                {
                    "name": "filter:",
                    "description": "[Optional]\n                A filter to be applied to the selection;"
                }
            ],
            "return": {
                "description": ":    The proper set of d3 elements."
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2486,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nCalled by __drawNewData__() to redraw the background properly\n\nWARNING:    if you inherit from this class you might want to override both\n            this method as well as __drawNewData__ and __updateDrawing__ \n            in order to obtain a custom chart.",
            "return": {
                "description": ":    Nothing."
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2522,
            "access": "protected",
            "tagname": "",
            "chainable": "[Protected method, not supposed to be used by consumers]\n\nCalled by __updateDrawing__() to update the labels of the vertical axe\n\nWARNING:    if you inherit from this class you might want to override both\n            this method as well as __drawNewData__ and __updateDrawing__ \n            in order to obtain a custom chart.",
            "params": [
                {
                    "name": "yScale:",
                    "description": "[Mandatory]\n                D3 scale object for Y axis;"
                }
            ],
            "return": {
                "description": ":    The current chart object, to allow for method chaining."
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2572,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nWARNING:    if you inherit from this class you might want to override both\n            this method and __updateDrawing__ in order to obtain a custom chart.",
            "override": ":   fixedWidthBarChart.__drawNewData__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2625,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nWARNING:    if you inherit from this class you might want to override both\n            this method and __drawNewData__ in order to obtain a custom chart.",
            "override": ":  fixedWidthBarChart.__updateDrawing__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2669,
            "access": "private",
            "tagname": "[Private method, not visible to consumers]\n\nInits the chart;",
            "params": [
                {
                    "name": "chart:",
                    "description": "[Mandatory]\n                The chart object that needs initialization;"
                },
                {
                    "name": "width:",
                    "description": "[Mandatory]\n                Chart's width;"
                },
                {
                    "name": "height:",
                    "description": "[Mandatory]\n                Chart's height;"
                }
            ],
            "return": {
                "description": ": This chart object (see how it's called)"
            },
            "override": ":  fixedWidthBarChart.__init__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2698,
            "override": ":  fixedWidthBarChart.__barWidth__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2762,
            "extends": "FixedWidthBarChart\n\nAdvanced Chart: TimeWheelChart\nInherits from BasicBarChart redefining the drawing methods.\n\nData is represented as bars drawn around a time wheel.\n\nIt is possible to choose between having only a fixed number of values accepted,\nor if a certain number of the oldest values should be removed when the\nchart is full.",
            "params": [
                {
                    "name": "ticks",
                    "description": "[Mandatory]\n                The number of values that can be drawn at the same time (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "startTime",
                    "description": "[Mandatory]\n                The reference for the label of the first point.<br>\n                Should be an incrementable value.",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "[Mandatory]\n                The desired width for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "height!~YUIDOC_LINE~!",
                    "description": "[Mandatory]\n                The desired height for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "dataDim",
                    "description": "[Optional]\n                The dimension of the data space, i.e. the number of subvalues for each data entry;<br>\n                Can be any value that is or can be converted to an integer between 1 and MAX_SPACE_DIMENSION.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "parent",
                    "description": "[Optional]\n                The DOM element to which the diagram should be appended as a child",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "body"
                }
            ],
            "return": {
                "description": "A new TimeWheelChart object",
                "type": "Object"
            },
            "throws": [
                "-   Illegal Argument Exception",
                "if ticks isn't a positive integer\n                    -   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n                    -   Illegal Argument Exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                        (through setWidth or setHeight)\n                    -   Illegal Argument Exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n                    -   Exception",
                "if dataDim exceeds the maximum data dimension\n                    -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2814,
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2823,
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2833,
            "description": "Sets the size of the labels used for the wheel",
            "chainable": 1,
            "params": [
                {
                    "name": "size:",
                    "description": "[Mandatory]\n                                                                The new size for the labels (must be an integer gt zero);"
                }
            ],
            "return": {
                "description": ":    This chart object, to allow for method chaining;"
            },
            "throws": [
                "- Illegal Argument Exception",
                "if the argument is not valid (see above)."
            ],
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2866,
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2876,
            "description": "Sets the color used for the static part of the wheel's drawing, \n                                                i.e. for labels and lines representing time ticks \n                                                of the time wheel",
            "chainable": 1,
            "params": [
                {
                    "name": "color:",
                    "description": "[Mandatory]\n                                                                The new forecolor for the wheel;"
                }
            ],
            "return": {
                "description": ":    This chart object, to allow for method chaining;"
            },
            "throws": [
                "- Illegal Argument Exception",
                "if color isn't passed or is null."
            ],
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2912,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\nChecks whether or not the labels showing time references on the wheel\nshould be drawn",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2928,
            "description": "Sets the width of this chart's bars",
            "chainable": 1,
            "params": [
                {
                    "name": "barWidth:",
                    "description": "[Mandatory]\n                                                                 The new bar width to be set;\n                                                                 Can be a positive number or its base 10 string representation."
                }
            ],
            "return": {
                "description": ":    This object, to allow for method chaining;"
            },
            "throws": [
                "Illegal Argument Exception",
                "if the argument isn't valid (see above)."
            ],
            "override": ":  basicBarChartSharedPrototype.setBarWidth",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2954,
            "description": "Sets the position of the center of the wheel.\n                                If it is valid and it is different from the current position,\n                                the drawing is moved to the new position",
            "chainable": 1,
            "params": [
                {
                    "name": "cx,",
                    "description": "cy:  [Mandatory]\n                                                x and y coordinates of the new center;"
                }
            ],
            "return": {
                "description": ":    This chart object, to allow for method chaining;"
            },
            "throws": [
                "- Illegal Argument Exception",
                "if cx or cy aren't valid."
            ],
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 2984,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nWhen the center of the time wheel is moved,\nthen takes care of all the updates needed for the chart",
            "params": [
                {
                    "name": "cx,",
                    "description": "cy:  [Mandatory]\n                The new center coordinates;"
                }
            ],
            "return": {
                "description": ":    Nothing."
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3040,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n                                               \nWARNING:    if you inherit from this class you might want to override both\n            this method and __updateDrawing__ in order to obtain a custom chart.",
            "override": ":   fixedWidthBarChart.__drawNewData__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3102,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nWARNING:    if you inherit from this class you might want to override both\n            this method and __drawNewData__ in order to obtain a custom chart.",
            "override": ":  fixedWidthBarChart.__updateDrawing__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3146,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nWARNING:    Inherited objects MIGHT NEED to override this function",
            "override": ": basicBarChartSharedPrototype.__onClearData__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3164,
            "access": "protected",
            "tagname": "[Protected method, not supposed to be used by consumers]\n\nUpdates the drawing of the static elements of the wheel\n\nWARNING:    Inherited objects MIGHT NEED to override this function",
            "return": {
                "description": ":    Nothing."
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3223,
            "description": "Object's destructor: helps garbage collector freeing memory, and removes chart DOM elements.\nWARNING: calling destroy on an object will force any further reference \n                                         to its attributes / methods to throw exceptions.\nNOTE:   This function should be override by any class inheriting from this chart.\n                                        In order to properly work, any overriding destroyer should:\n                                        - Free any array specific to the object on which is called;\n                                        - Remove any event listener on chart objects;\n                                        - Call super object's destroy method.",
            "return": {
                "description": ":    null, to state that the object has been destroyed."
            },
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3258,
            "access": "private",
            "tagname": "[Private method, not visible to consumers]\n\nInits the chart;",
            "params": [
                {
                    "name": "chart:",
                    "description": "[Mandatory]\n                The chart that need initialization;"
                },
                {
                    "name": "width:",
                    "description": "[Mandatory]\n                Chart's width;"
                },
                {
                    "name": "height:",
                    "description": "[Mandatory]\n                Chart's height;"
                },
                {
                    "name": "wheelRadius:",
                    "description": "[Mandatory]   \n                     Wheel inner radius;"
                }
            ],
            "return": {
                "description": ": This chart object (see how it's called)"
            },
            "override": ":  fixedWidthBarChart.3",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3277,
            "description": "Defaults to 8, can be changed at runtime",
            "override": ":  fixedWidthBarChart.__barWidth__",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3288,
            "description": "Defaults to the horizontal center of the chart\nCan be changed at runtime",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3299,
            "description": "Defaults to the vertical center of the chart\nCan be changed at runtime",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3313,
            "description": "CAN NOT be changed at runtime",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3322,
            "description": "CAN NOT be changed at runtime",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3334,
            "description": "CAN NOT be changed at runtime",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3343,
            "description": "CAN NOT be changed at runtime",
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3369,
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3461,
            "class": "FixedWidthBarChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3481,
            "itemtype": "method",
            "name": "BasicBarChart",
            "chainable": 1,
            "params": [
                {
                    "name": "width",
                    "description": "[Mandatory]\n                The desired width for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                The desired height for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "dataDim",
                    "description": "[Optional]\n                The dimension of the data space, i.e. the number of subvalues for each data entry<br>\n                Can be any value that is or can be converted to an integer between 1 and MAX_SPACE_DIMENSION.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "parent",
                    "description": "[Optional]\n                The DOM element to which the diagram should be appended as a child",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "body"
                }
            ],
            "return": {
                "description": "A (wrapped-in-a-proxy version of a) BasicBarChart object",
                "type": "Object"
            },
            "throws": [
                "-   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n                    -   Illegal Argument exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                        (through setWidth or setHeight)\n                    -   Illegal Argument exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n                    -   Exception",
                "if dataDim exceeds the maximum data dimension\n                    -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3509,
            "itemtype": "method",
            "name": "FixedWidthBarChart",
            "chainable": 1,
            "params": [
                {
                    "name": "ticks",
                    "description": "[Mandatory]\n                The number of values that can be drawn at the same time (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "startingPoint",
                    "description": "[Mandatory, but not used at the moment: inserted for future back-compatibility]<br>\n                The reference for the label of the first point.<br>\n                Should be an incrementable value;",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "[Mandatory]\n                The desired width for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                The desired height for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "dataDim",
                    "description": "[Optional]\n                The dimension of the data space, i.e. the number of subvalues for each data entry<br>\n                Can be any value that is or can be converted to an integer between 1 and MAX_SPACE_DIMENSION.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "parent",
                    "description": "[Optional]\n                The DOM element to which the diagram should be appended as a child",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "body"
                }
            ],
            "return": {
                "description": "A properly initialized (wrapped-in-a-proxy version of a) FixedWidthBarChart object",
                "type": "Object"
            },
            "throws": [
                "-   Illegal Argument Exception",
                "if ticks isn't a positive integer\n                    -   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n                    -   Illegal Argument Exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                        (through setWidth or setHeight)\n                    -   Illegal Argument Exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n                    -   Exception",
                "if dataDim exceeds the maximum data dimension\n                    -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3544,
            "itemtype": "method",
            "name": "SlidingBarChart",
            "chainable": 1,
            "params": [
                {
                    "name": "ticks",
                    "description": "[Mandatory]\n                The number of values that can be drawn at the same time (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "[Mandatory]\n                The desired width for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                The desired height for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "dataDim",
                    "description": "[Optional]\n                The dimension of the data space, i.e. the number of subvalues for each data entry <br>\n                Can be any value that is or can be converted to an integer between 1 and MAX_SPACE_DIMENSION.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "parent",
                    "description": "The DOM element to which the diagram should be appended as a child",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "body"
                }
            ],
            "return": {
                "description": "A properly initialized (wrapped-in-a-proxy version of a) SlidingBarChart object",
                "type": "Object"
            },
            "throws": [
                "-   Illegal Argument Exception",
                "if ticks isn't a positive integer\n                    -   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n                    -   Illegal Argument Exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                        (through setWidth or setHeight)\n                    -   Illegal Argument Exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n                    -   Exception",
                "if dataDim exceeds the maximum data dimension\n                    -   Exception",
                "if the ratio between chart's width and number of ticks is such\n                        that the computed bar height is smaller than 1 pixel\n                    -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "DynamicChart",
            "module": "DynamicChart"
        },
        {
            "file": "dynamic_chart.js",
            "line": 3577,
            "itemtype": "method",
            "name": "TimeWheelChart",
            "chainable": 1,
            "params": [
                {
                    "name": "ticks",
                    "description": "[Mandatory]\n                The number of values that can be drawn at the same time (<b>can't be changed later</b>)\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "startTime",
                    "description": "[Mandatory]\n                The reference for the label of the first point.<br>\n                Should be an incrementable value.",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "[Mandatory]\n                The desired width for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "[Mandatory]\n                The desired height for the chart (<b>can't be changed later</b>)<br>\n                Can be any value that is or can be converted to a positive integer.",
                    "type": "Number"
                },
                {
                    "name": "dataDim",
                    "description": "[Optional]\n                The dimension of the data space, i.e. the number of subvalues for each data entry<br>\n                Can be any value that is or can be converted to an integer between 1 and MAX_SPACE_DIMENSION.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "parent",
                    "description": "[Optional]\n                The DOM element to which the diagram should be appended as a child<br>",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "body"
                }
            ],
            "return": {
                "description": "A properly initialized (wrapped-in-a-proxy version of a) TimeWheelChart object",
                "type": "Object"
            },
            "throws": [
                "-   Illegal Argument Exception",
                "if ticks isn't a positive integer\n                    -   Wrong number of arguments Exception",
                "if width or height are not passed as arguments (directly)\n                    -   Illegal Argument Exception",
                "if width or height aren't valid (numeric",
                "positive) values \n                        (through setWidth or setHeight)\n                    -   Illegal Argument Exception",
                "if dataDim is passed but it's invalid (not numeric or not positive)\n                    -   Exception",
                "if dataDim exceeds the maximum data dimension\n                    -   Exception",
                "if parent is passed but it is not a valid DOM element"
            ],
            "class": "DynamicChart",
            "module": "DynamicChart"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2008"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2025"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2069"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2114"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2415"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2572"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2625"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2669"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2698"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:2928"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:3040"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:3102"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:3146"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:3258"
        },
        {
            "message": "unknown tag: override",
            "line": " dynamic_chart.js:3277"
        },
        {
            "message": "Missing item type\nmodule ChartUtils",
            "line": " chart_utils.js:2"
        },
        {
            "message": "Missing item type\nCreates and returns a safe proxy for the object passed\n                                                    that will wrap around it and expose only those methods\n                                                    that are declared as enumerable.",
            "line": " chart_utils.js:46"
        },
        {
            "message": "Missing item type\nCreates a new array (shallow) copying the elements of the current one",
            "line": " chart_utils.js:147"
        },
        {
            "message": "Missing item type\nTakes a value and a positive integer and returns an Array of n copies of that value",
            "line": " chart_utils.js:222"
        },
        {
            "message": "Missing item type\nFormat a hours, minutes couple into a proper time string\nINVARIANT: HH and MM are valid, positive integers\n           If the overcome their range, proper formatting is enforced:\n           F.i. 23,60 -> \"00:00\"",
            "line": " chart_utils.js:251"
        },
        {
            "message": "Missing item type\nTakes a string as input and checks if it is a valid\ntime representation, according to the format HH:MM",
            "line": " chart_utils.js:271"
        },
        {
            "message": "Missing item type\nTakes two strings as input and checks if they are valid\ntime representations, according to the format HH:MM\nIf it is so, sums them and returns a new string representing\nthe resulting time;",
            "line": " chart_utils.js:292"
        },
        {
            "message": "Missing item type\nTakes a string and an int value and checks if it is a valid\ntime representation, according to the format HH:MM",
            "line": " chart_utils.js:324"
        },
        {
            "message": "Missing item type\nInsert new data into the chart, at runtime;",
            "line": " dynamic_chart.js:671"
        },
        {
            "message": "Missing item type\nChange the data formatting function, allowing to pass a custom handler\n                            to cope with JSON or other data formats.",
            "line": " dynamic_chart.js:746"
        },
        {
            "message": "Missing item type\nRemove all the data or part of it from the chart;",
            "line": " dynamic_chart.js:771"
        },
        {
            "message": "Missing item type\nToggles the visibility of labels in the chart",
            "line": " dynamic_chart.js:810"
        },
        {
            "message": "Missing item type\nChecks if labels for the index-th dimension are visible",
            "line": " dynamic_chart.js:840"
        },
        {
            "message": "Missing item type\nSets scaling to global\nWhen data space has a dimension greater than 1 (i.e. when each data value has more than 1 component)\n                                    these charts support either global scaling (relative to the whole dataset)\n                                    or local scaling (relative to value of the same component) of each subcomponent.",
            "line": " dynamic_chart.js:862"
        },
        {
            "message": "Missing item type\nSets scaling to local",
            "line": " dynamic_chart.js:885"
        },
        {
            "message": "Missing item type\nGets the fill color used to draw the index-th component of the data space.",
            "line": " dynamic_chart.js:909"
        },
        {
            "message": "Missing item type\nGets the stroke color used to draw the index-th component of the data space.",
            "line": " dynamic_chart.js:931"
        },
        {
            "message": "Missing item type\nGets the fill color used for the labels attached to the index-th component of the data space.",
            "line": " dynamic_chart.js:952"
        },
        {
            "message": "Missing item type\nGets the size used for the labels attached to the index-th component of the data space.",
            "line": " dynamic_chart.js:973"
        },
        {
            "message": "Missing item type\nSets the fill color used to draw the index-th component of the data space.",
            "line": " dynamic_chart.js:994"
        },
        {
            "message": "Missing item type\nSets the stroke color used to draw the index-th component of the data space.",
            "line": " dynamic_chart.js:1024"
        },
        {
            "message": "Missing item type\nSets the fill color used for the labels attached to the index-th component of the data space.",
            "line": " dynamic_chart.js:1050"
        },
        {
            "message": "Missing item type\nSets the size used for the labels attached to the index-th component of the data space.",
            "line": " dynamic_chart.js:1081"
        },
        {
            "message": "Missing item type\nSets the bars width property;\n                                For this chart, bar width is computed at runtime according to the number of bars plotted,\n                                so this property can't be set.\n                                Function is declared to improve the consistency of the interface.",
            "line": " dynamic_chart.js:1114"
        },
        {
            "message": "Missing item type\nGets the current bar width for this chart;\n                                For this chart, bar width is computed at runtime according to the number of bars plotted;",
            "line": " dynamic_chart.js:1126"
        },
        {
            "message": "Missing item type\nObject's destructor: helps garbage collector freeing memory, and removes chart DOM elements.\nWARNING: calling destroy on an object will force any further reference \n                                     to its attributes / methods to throw exceptions.\nNOTE:   This function should be override by any class inheriting from this chart.\n                                    In order to properly work, any overriding destroyer should:\n                                    - Free any array specific to the object on which is called;\n                                    - Remove any event listener on chart objects;\n                                    - Call super object's destroy method.",
            "line": " dynamic_chart.js:1152"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1197"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1213"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1239"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1279"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1311"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1344"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1415"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1479"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1503"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1527"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1584"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1619"
        },
        {
            "message": "Missing item type\ni.e. number of subcomponents of each data \"point\"",
            "line": " dynamic_chart.js:1649"
        },
        {
            "message": "Missing item type\nInitially every component's array is set to []",
            "line": " dynamic_chart.js:1659"
        },
        {
            "message": "Missing item type\n(used to compute the vertical scale)\nDefaults to 0",
            "line": " dynamic_chart.js:1668"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:1703"
        },
        {
            "message": "Missing item type\nThe div element that will be a container to the chart's svg element",
            "line": " dynamic_chart.js:1712"
        },
        {
            "message": "Missing item type\nThe chart's svg element",
            "line": " dynamic_chart.js:1722"
        },
        {
            "message": "Missing item type\nScale object for the horizontal axis of the chart \n(common to all data subcomponents)",
            "line": " dynamic_chart.js:1732"
        },
        {
            "message": "Missing item type\nScale objects for the vertical axis of the chart \n(array with one obj for each data subcomponents,\n so that each component can be scaled independently)",
            "line": " dynamic_chart.js:1743"
        },
        {
            "message": "Missing item type\nif the different components should scale locally or globally",
            "line": " dynamic_chart.js:1754"
        },
        {
            "message": "Missing item type\nFor each data subcomponent, stores the size to be used\nfor its label\n[Defaults to DEFAULT_LABEL_SIZE]",
            "line": " dynamic_chart.js:1764"
        },
        {
            "message": "Missing item type\nFor each data subcomponent, states whether or not\nits label is visible\n[Defaults to true]",
            "line": " dynamic_chart.js:1775"
        },
        {
            "message": "Missing item type\nFor each data subcomponent, stores the color to be used\nto fill its drawing component\n[Defaults to a predefined color sequence]",
            "line": " dynamic_chart.js:1787"
        },
        {
            "message": "Missing item type\nFor each data subcomponent, stores the color to be used\nfor the stroke of its drawing component\n[Defaults to black]",
            "line": " dynamic_chart.js:1799"
        },
        {
            "message": "Missing item type\nFor each data subcomponent, stores the color to be used\nto draw its labels [Defaults to black]",
            "line": " dynamic_chart.js:1810"
        },
        {
            "message": "Missing item type\ndecides to add a legend to the chart;\n[Defaults to null]",
            "line": " dynamic_chart.js:1821"
        },
        {
            "message": "Missing item type\ndrawn at the same time in this chart",
            "line": " dynamic_chart.js:1897"
        },
        {
            "message": "Missing item type\n[Defaults to 1]",
            "line": " dynamic_chart.js:1906"
        },
        {
            "message": "Missing item type\nnew plots would override previous ones.\nTwo solutions are made available:\n1)  By default, new data is rejected, generating a full stack exception;\n2)  A certain number of the oldest data points can be purged off the chart,\n    counter-clockwise rotating the data",
            "line": " dynamic_chart.js:1916"
        },
        {
            "message": "Missing item type\nSets fixed data length mode.\n                                                \n                                                When __ticks__ data points have already been plotted,\n                                                new plots would override previous ones.\n                                                Two solutions are made available:\n                                                1)  By default, new data is rejected, generating a full stack exception;\n                                                2)  A certain number of the oldest data points can be purged off the chart,\n                                                    counter-clockwise rotating the data\n                                                    \n                                                This function sets the first option.",
            "line": " dynamic_chart.js:1932"
        },
        {
            "message": "Missing item type\nSets data shift mode.\n                                                \n                                                When __ticks__ data points have already been plotted,\n                                                new plots would override previous ones.\n                                                Two solutions are made available:\n                                                1)  By default, new data is rejected, generating a full stack exception;\n                                                2)  A certain number of the oldest data points can be purged off the chart,\n                                                    shifting back (left) the remaining data.\n                                                    \n                                                This function sets the second option.",
            "line": " dynamic_chart.js:1967"
        },
        {
            "message": "Missing item type\nReturns current bars' width.\n                                                The overridden version takes a parameter, but this method\n                                                doesn't need it because barWidth is fixed for this chart.",
            "line": " dynamic_chart.js:2008"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2025"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2069"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2114"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2149"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2169"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2186"
        },
        {
            "message": "Missing item type\nthe chart from its creation (to synch the highlighted ticks)",
            "line": " dynamic_chart.js:2246"
        },
        {
            "message": "Missing item type\nEvery __ticksBetweenHighlights__ ticks, the data is \"higlighted\"\nby applying the selected highlight style to the background\n[Defaults to 10]",
            "line": " dynamic_chart.js:2256"
        },
        {
            "message": "Missing item type\nReturns the number of ticks between two consecutive highlights (one extreme inclusive)",
            "line": " dynamic_chart.js:2268"
        },
        {
            "message": "Missing item type\nSets the number of ticks between two consecutive highlights (one extreme inclusive)",
            "line": " dynamic_chart.js:2282"
        },
        {
            "message": "Missing item type\nDefaults to DEFAULT_BACKGROUND (\"lightgrey\")",
            "line": " dynamic_chart.js:2309"
        },
        {
            "message": "Missing item type\nDefaults to DEFAULT_BACKGROUND_HIGHLIGHT (\"lightpink\")",
            "line": " dynamic_chart.js:2320"
        },
        {
            "message": "Missing item type\nChanges the background color (not highlighted points)",
            "line": " dynamic_chart.js:2331"
        },
        {
            "message": "Missing item type\nReturns current background bars' color",
            "line": " dynamic_chart.js:2360"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2375"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2402"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2415"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2461"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2486"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2522"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2572"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2625"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2669"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2698"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2762"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2814"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2823"
        },
        {
            "message": "Missing item type\nSets the size of the labels used for the wheel",
            "line": " dynamic_chart.js:2833"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2866"
        },
        {
            "message": "Missing item type\nSets the color used for the static part of the wheel's drawing, \n                                                i.e. for labels and lines representing time ticks \n                                                of the time wheel",
            "line": " dynamic_chart.js:2876"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2912"
        },
        {
            "message": "Missing item type\nSets the width of this chart's bars",
            "line": " dynamic_chart.js:2928"
        },
        {
            "message": "Missing item type\nSets the position of the center of the wheel.\n                                If it is valid and it is different from the current position,\n                                the drawing is moved to the new position",
            "line": " dynamic_chart.js:2954"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:2984"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:3040"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:3102"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:3146"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:3164"
        },
        {
            "message": "Missing item type\nObject's destructor: helps garbage collector freeing memory, and removes chart DOM elements.\nWARNING: calling destroy on an object will force any further reference \n                                         to its attributes / methods to throw exceptions.\nNOTE:   This function should be override by any class inheriting from this chart.\n                                        In order to properly work, any overriding destroyer should:\n                                        - Free any array specific to the object on which is called;\n                                        - Remove any event listener on chart objects;\n                                        - Call super object's destroy method.",
            "line": " dynamic_chart.js:3223"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:3258"
        },
        {
            "message": "Missing item type\nDefaults to 8, can be changed at runtime",
            "line": " dynamic_chart.js:3277"
        },
        {
            "message": "Missing item type\nDefaults to the horizontal center of the chart\nCan be changed at runtime",
            "line": " dynamic_chart.js:3288"
        },
        {
            "message": "Missing item type\nDefaults to the vertical center of the chart\nCan be changed at runtime",
            "line": " dynamic_chart.js:3299"
        },
        {
            "message": "Missing item type\nCAN NOT be changed at runtime",
            "line": " dynamic_chart.js:3313"
        },
        {
            "message": "Missing item type\nCAN NOT be changed at runtime",
            "line": " dynamic_chart.js:3322"
        },
        {
            "message": "Missing item type\nCAN NOT be changed at runtime",
            "line": " dynamic_chart.js:3334"
        },
        {
            "message": "Missing item type\nCAN NOT be changed at runtime",
            "line": " dynamic_chart.js:3343"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:3369"
        },
        {
            "message": "Missing item type",
            "line": " dynamic_chart.js:3461"
        }
    ]
}